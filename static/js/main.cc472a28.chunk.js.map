{"version":3,"sources":["Components/input.js","Components/Contents.js","Components/Mask.js","Components/Locas.js","App.js","serviceWorker.js","index.js"],"names":["Gnb","styled","div","SearchInput","onSearch","useState","value","setValue","type","className","onChange","e","target","onKeyDown","keyCode","Content","Contents","shop","addr","name","remain_stat","color","setColor","style","getMask","y","x","setStores","a","axios","get","response","stores","data","store","map","lat","lng","Mapwrap","Maps","setMap","setError","pharmacy","setPharmacy","useCallback","marker","kakao","maps","Marker","position","LatLng","clickable","overlay","CustomOverlay","content","ReactDOMServer","renderToStaticMarkup","getPosition","event","addListener","useEffect","container","document","getElementById","options","center","level","Map","keyword","services","Places","keywordSearch","result","status","Status","OK","firstItem","console","log","moveLatLng","panTo","ZERO_RESULT","id","MapWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc472a28.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\n\r\nconst Gnb = styled.div `\r\n \r\n    position: absolute;\r\n    right: 0;\r\n    bottom:0;\r\n    z-index:20;\r\n    background-color: #e5dbff;\r\n    width: 100vw;\r\n    height: 20vh;\r\n    color: #fff;\r\n\r\n\r\n    .inputSearch{\r\n        position: absolute;\r\n        left:30%;\r\n        top:50%;\r\n        outline: none;\r\n        width: 30vw;\r\n        height: 30px;\r\n        background-color:  #f3f0ff;\r\n        border: none;\r\n        color: #5f3dc4;\r\n    }\r\n\r\n    \r\n`\r\n\r\n// const CircleBtn = styled.button `\r\n\r\n//     background: #845ef7;\r\n//     &:hover{\r\n//         background: #63e6be;\r\n//     }\r\n//     &:active{\r\n//         background: #20c997;\r\n//     }\r\n//     z-index: 5;\r\n//     cursor: pointer;\r\n//     width: 50px;\r\n//     height: 50px;\r\n//     position: absolute;\r\n//     right: 0;\r\n//     top: 0;\r\n//     font-size:60px;\r\n//     color : #fff;\r\n//     border-radius: 40px;\r\n//     border: none; \r\n//     outline: none;\r\n//     transition: all .125s ease-in;\r\n\r\n// `\r\n\r\n\r\n\r\n\r\nfunction SearchInput({onSearch}){\r\n\r\n    const [value, setValue] = useState('');\r\n    const [ open, setOpen ] = useState(false)\r\n    \r\n    const onChange = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const onSubmit = (e) =>{\r\n        if(e.keyCode === 13){\r\n            onSearch(value)\r\n            setValue('')\r\n        }\r\n    }\r\n\r\n    const gnbClose = () => setOpen(!open)\r\n\r\n    return(\r\n        \r\n            <Gnb>\r\n              \r\n                <input \r\n                    type='search'\r\n                    className='inputSearch'  \r\n                    value={value} \r\n                    onChange={onChange} \r\n                    onKeyDown={onSubmit}\r\n                />\r\n            </Gnb>\r\n       \r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default SearchInput","import React,{ useState } from 'react'\r\nimport styled, { css } from 'styled-components';\r\n\r\n\r\nconst Content = styled.div `\r\n  position: absolute;\r\n  top:0;\r\n  left:-100px;\r\n  width: 250px;\r\n  z-index:9999;\r\n  padding: 5px 10px 20px;\r\n  background:#fff;\r\n  overflow:hidden;\r\n  \r\n    h3{\r\n      font-size: 14px;\r\n    }\r\n    p{\r\n      font-size: 12px;\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n      text-overflow: ellipsis;\r\n    }\r\n    span{\r\n      font-size: 12px;\r\n    }\r\n`\r\n\r\n\r\n\r\nconst Contents = (shop) => {\r\n\r\n  const { addr, name, remain_stat } = shop.shop\r\n  const { color, setColor } = useState('')\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <Content>\r\n        <h3>{name}</h3>\r\n        <p>{addr}</p>\r\n        <span style={{color:{color}}}>\r\n          {\r\n            remain_stat\r\n          }\r\n        </span>\r\n    </Content>\r\n  )\r\n}\r\n\r\nexport default Contents\r\n","import axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\nexport async function getMask(y, x, setStores) {\r\n   \r\n    const response = await axios.get(\r\n      `https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=${y}&lng=${x}&m=1000`\r\n      // `https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?`\r\n      \r\n    );\r\n    const stores = response.data.stores\r\n    const store = stores.map(store=>{\r\n      const { addr, name, lat, lng, remain_stat } = store\r\n      return { addr, name, lat, lng, remain_stat }\r\n    })\r\n    return setStores(store)\r\n}\r\n\r\n  \r\n","import React,{ useState, useEffect, useCallback } from 'react'/*global kakao*/ ;\r\nimport styled from 'styled-components';\r\nimport SearchInput from './input.js'\r\nimport Contents from './Contents.js'\r\nimport{ getMask } from './Mask.js';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\nconst Mapwrap = styled.div `\r\n    #map{\r\n      width: 100vw;\r\n      height: 100vh;\r\n    }\r\n\r\n`\r\n\r\n\r\n\r\nconst Maps = () =>{\r\n  \r\n  const [ map, setMap ] = useState(null);\r\n  const [ error, setError ] = useState('');\r\n  const [ pharmacy, setPharmacy] = useState({\r\n    data:[]\r\n  });\r\n  \r\n\r\n\r\n  const setStores = useCallback(data => {\r\n    \r\n    setPharmacy({\r\n      ...pharmacy,\r\n      data,\r\n    })\r\n    \r\n  },[pharmacy])\r\n  \r\n \r\n  const setMarker = () =>{\r\n    const { data } = pharmacy\r\n    \r\n      data.map(shop=>{\r\n        const { lat, lng, } = shop;\r\n\r\n        const marker = new kakao.maps.Marker({\r\n          map,   \r\n          position: new kakao.maps.LatLng(lat, lng),\r\n          clickable: true\r\n        })\r\n        \r\n        \r\n        const overlay = new kakao.maps.CustomOverlay({\r\n          content:ReactDOMServer.renderToStaticMarkup(\r\n           <Contents shop={shop}  />),\r\n          map,\r\n          position: marker.getPosition(),\r\n        })\r\n\r\n        overlay.setMap(null)\r\n        \r\n        kakao.maps.event.addListener(marker, 'mouseover', function () {\r\n          overlay.setMap(map)\r\n        });\r\n       kakao.maps.event.addListener(marker, 'mouseout', function () {\r\n         overlay.setMap(null)\r\n       })\r\n        \r\n      })  \r\n      \r\n  }\r\n  setMarker()\r\n  \r\n  const searchPlace = keyword => {\r\n      const places = new kakao.maps.services.Places()\r\n      places.keywordSearch(keyword, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          const firstItem = result[0]\r\n          const { x, y } = firstItem\r\n          console.log(x,y)\r\n          const moveLatLng = new kakao.maps.LatLng(y, x);\r\n          map.panTo(moveLatLng)\r\n          getMask(y, x, setStores)\r\n        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n          setError(\"검색 결과가 없습니다.\")\r\n        } else {\r\n          setError(\"다시 시도해주세요.\")\r\n        }\r\n      })\r\n    }\r\n    \r\n  const SeachShow = value => {\r\n    if (value) {\r\n      searchPlace(value)\r\n    }\r\n  }\r\n \r\n\r\n  useEffect(() => {\r\n    const container = document.getElementById(\"map\")\r\n    const options = {\r\n      center: new kakao.maps.LatLng(37.6646316280323, 127.065922449004),\r\n      level: 2\r\n    }\r\n     \r\n    const map = new kakao.maps.Map(container, options)\r\n    setMap(map)\r\n    getMask(37.6646316280323, 127.065922449004, setStores)\r\n    \r\n  }, [])\r\n\r\n\r\n  return (\r\n      <Mapwrap>\r\n        <SearchInput onSearch={SeachShow}/>\r\n        <div id=\"map\" >\r\n        \r\n        </div>\r\n      </Mapwrap>\r\n  )\r\n}\r\nexport default Maps","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Maps from './Components/Locas';\r\n\r\n\r\nconst MapWrapper = styled.div `\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\n\r\nfunction App() {\r\n\r\n  return (\r\n\r\n    <MapWrapper>\r\n      <Maps/>     \r\n    </MapWrapper>  \r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}